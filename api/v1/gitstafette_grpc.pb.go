// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gitstafette_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GitstafetteClient is the client API for Gitstafette service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitstafetteClient interface {
	FetchWebhookEvents(ctx context.Context, in *WebhookEventsRequest, opts ...grpc.CallOption) (Gitstafette_FetchWebhookEventsClient, error)
	WebhookEventPush(ctx context.Context, in *WebhookEventPushRequest, opts ...grpc.CallOption) (*WebhookEventPushResponse, error)
}

type gitstafetteClient struct {
	cc grpc.ClientConnInterface
}

func NewGitstafetteClient(cc grpc.ClientConnInterface) GitstafetteClient {
	return &gitstafetteClient{cc}
}

func (c *gitstafetteClient) FetchWebhookEvents(ctx context.Context, in *WebhookEventsRequest, opts ...grpc.CallOption) (Gitstafette_FetchWebhookEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gitstafette_serviceDesc.Streams[0], "/gitstafette.v1.Gitstafette/FetchWebhookEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitstafetteFetchWebhookEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gitstafette_FetchWebhookEventsClient interface {
	Recv() (*WebhookEventsResponse, error)
	grpc.ClientStream
}

type gitstafetteFetchWebhookEventsClient struct {
	grpc.ClientStream
}

func (x *gitstafetteFetchWebhookEventsClient) Recv() (*WebhookEventsResponse, error) {
	m := new(WebhookEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitstafetteClient) WebhookEventPush(ctx context.Context, in *WebhookEventPushRequest, opts ...grpc.CallOption) (*WebhookEventPushResponse, error) {
	out := new(WebhookEventPushResponse)
	err := c.cc.Invoke(ctx, "/gitstafette.v1.Gitstafette/WebhookEventPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitstafetteServer is the config API for Gitstafette service.
// All implementations must embed UnimplementedGitstafetteServer
// for forward compatibility
type GitstafetteServer interface {
	FetchWebhookEvents(*WebhookEventsRequest, Gitstafette_FetchWebhookEventsServer) error
	WebhookEventPush(context.Context, *WebhookEventPushRequest) (*WebhookEventPushResponse, error)
	mustEmbedUnimplementedGitstafetteServer()
}

// UnimplementedGitstafetteServer must be embedded to have forward compatible implementations.
type UnimplementedGitstafetteServer struct {
}

func (UnimplementedGitstafetteServer) FetchWebhookEvents(*WebhookEventsRequest, Gitstafette_FetchWebhookEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchWebhookEvents not implemented")
}
func (UnimplementedGitstafetteServer) WebhookEventPush(context.Context, *WebhookEventPushRequest) (*WebhookEventPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookEventPush not implemented")
}
func (UnimplementedGitstafetteServer) mustEmbedUnimplementedGitstafetteServer() {}

// UnsafeGitstafetteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitstafetteServer will
// result in compilation errors.
type UnsafeGitstafetteServer interface {
	mustEmbedUnimplementedGitstafetteServer()
}

func RegisterGitstafetteServer(s *grpc.Server, srv GitstafetteServer) {
	s.RegisterService(&_Gitstafette_serviceDesc, srv)
}

func _Gitstafette_FetchWebhookEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WebhookEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitstafetteServer).FetchWebhookEvents(m, &gitstafetteFetchWebhookEventsServer{stream})
}

type Gitstafette_FetchWebhookEventsServer interface {
	Send(*WebhookEventsResponse) error
	grpc.ServerStream
}

type gitstafetteFetchWebhookEventsServer struct {
	grpc.ServerStream
}

func (x *gitstafetteFetchWebhookEventsServer) Send(m *WebhookEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Gitstafette_WebhookEventPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookEventPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitstafetteServer).WebhookEventPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitstafette.v1.Gitstafette/WebhookEventPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitstafetteServer).WebhookEventPush(ctx, req.(*WebhookEventPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gitstafette_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitstafette.v1.Gitstafette",
	HandlerType: (*GitstafetteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WebhookEventPush",
			Handler:    _Gitstafette_WebhookEventPush_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchWebhookEvents",
			Handler:       _Gitstafette_FetchWebhookEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/gitstafette.proto",
}
